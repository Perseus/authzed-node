// source: arrakisapi/api/namespace.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ComputedUserset', null, global);
goog.exportSymbol('proto.ComputedUserset.Object', null, global);
goog.exportSymbol('proto.NamespaceDefinition', null, global);
goog.exportSymbol('proto.Relation', null, global);
goog.exportSymbol('proto.SetOperation', null, global);
goog.exportSymbol('proto.SetOperation.Child', null, global);
goog.exportSymbol('proto.SetOperation.Child.ChildTypeCase', null, global);
goog.exportSymbol('proto.SetOperation.Child.This', null, global);
goog.exportSymbol('proto.TupleToUserset', null, global);
goog.exportSymbol('proto.TupleToUserset.Tupleset', null, global);
goog.exportSymbol('proto.UsersetRewrite', null, global);
goog.exportSymbol('proto.UsersetRewrite.RewriteOperationCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NamespaceDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NamespaceDefinition.repeatedFields_, null);
};
goog.inherits(proto.NamespaceDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NamespaceDefinition.displayName = 'proto.NamespaceDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Relation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Relation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Relation.displayName = 'proto.Relation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UsersetRewrite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UsersetRewrite.oneofGroups_);
};
goog.inherits(proto.UsersetRewrite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UsersetRewrite.displayName = 'proto.UsersetRewrite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SetOperation.repeatedFields_, null);
};
goog.inherits(proto.SetOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetOperation.displayName = 'proto.SetOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetOperation.Child = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SetOperation.Child.oneofGroups_);
};
goog.inherits(proto.SetOperation.Child, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetOperation.Child.displayName = 'proto.SetOperation.Child';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetOperation.Child.This = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetOperation.Child.This, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetOperation.Child.This.displayName = 'proto.SetOperation.Child.This';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TupleToUserset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TupleToUserset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TupleToUserset.displayName = 'proto.TupleToUserset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TupleToUserset.Tupleset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TupleToUserset.Tupleset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TupleToUserset.Tupleset.displayName = 'proto.TupleToUserset.Tupleset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ComputedUserset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ComputedUserset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ComputedUserset.displayName = 'proto.ComputedUserset';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NamespaceDefinition.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NamespaceDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.NamespaceDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NamespaceDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NamespaceDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    relationList: jspb.Message.toObjectList(msg.getRelationList(),
    proto.Relation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NamespaceDefinition}
 */
proto.NamespaceDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NamespaceDefinition;
  return proto.NamespaceDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NamespaceDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NamespaceDefinition}
 */
proto.NamespaceDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Relation;
      reader.readMessage(value,proto.Relation.deserializeBinaryFromReader);
      msg.addRelation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NamespaceDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NamespaceDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NamespaceDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NamespaceDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRelationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Relation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.NamespaceDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NamespaceDefinition} returns this
 */
proto.NamespaceDefinition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Relation relation = 2;
 * @return {!Array<!proto.Relation>}
 */
proto.NamespaceDefinition.prototype.getRelationList = function() {
  return /** @type{!Array<!proto.Relation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Relation, 2));
};


/**
 * @param {!Array<!proto.Relation>} value
 * @return {!proto.NamespaceDefinition} returns this
*/
proto.NamespaceDefinition.prototype.setRelationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Relation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Relation}
 */
proto.NamespaceDefinition.prototype.addRelation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Relation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NamespaceDefinition} returns this
 */
proto.NamespaceDefinition.prototype.clearRelationList = function() {
  return this.setRelationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Relation.prototype.toObject = function(opt_includeInstance) {
  return proto.Relation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Relation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Relation.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    usersetRewrite: (f = msg.getUsersetRewrite()) && proto.UsersetRewrite.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Relation}
 */
proto.Relation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Relation;
  return proto.Relation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Relation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Relation}
 */
proto.Relation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.UsersetRewrite;
      reader.readMessage(value,proto.UsersetRewrite.deserializeBinaryFromReader);
      msg.setUsersetRewrite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Relation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Relation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Relation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Relation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsersetRewrite();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UsersetRewrite.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Relation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UsersetRewrite userset_rewrite = 2;
 * @return {?proto.UsersetRewrite}
 */
proto.Relation.prototype.getUsersetRewrite = function() {
  return /** @type{?proto.UsersetRewrite} */ (
    jspb.Message.getWrapperField(this, proto.UsersetRewrite, 2));
};


/**
 * @param {?proto.UsersetRewrite|undefined} value
 * @return {!proto.Relation} returns this
*/
proto.Relation.prototype.setUsersetRewrite = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.clearUsersetRewrite = function() {
  return this.setUsersetRewrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Relation.prototype.hasUsersetRewrite = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UsersetRewrite.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.UsersetRewrite.RewriteOperationCase = {
  REWRITE_OPERATION_NOT_SET: 0,
  UNION: 1,
  INTERSECTION: 2,
  EXCLUSION: 3
};

/**
 * @return {proto.UsersetRewrite.RewriteOperationCase}
 */
proto.UsersetRewrite.prototype.getRewriteOperationCase = function() {
  return /** @type {proto.UsersetRewrite.RewriteOperationCase} */(jspb.Message.computeOneofCase(this, proto.UsersetRewrite.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UsersetRewrite.prototype.toObject = function(opt_includeInstance) {
  return proto.UsersetRewrite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UsersetRewrite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UsersetRewrite.toObject = function(includeInstance, msg) {
  var f, obj = {
    union: (f = msg.getUnion()) && proto.SetOperation.toObject(includeInstance, f),
    intersection: (f = msg.getIntersection()) && proto.SetOperation.toObject(includeInstance, f),
    exclusion: (f = msg.getExclusion()) && proto.SetOperation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UsersetRewrite}
 */
proto.UsersetRewrite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UsersetRewrite;
  return proto.UsersetRewrite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UsersetRewrite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UsersetRewrite}
 */
proto.UsersetRewrite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SetOperation;
      reader.readMessage(value,proto.SetOperation.deserializeBinaryFromReader);
      msg.setUnion(value);
      break;
    case 2:
      var value = new proto.SetOperation;
      reader.readMessage(value,proto.SetOperation.deserializeBinaryFromReader);
      msg.setIntersection(value);
      break;
    case 3:
      var value = new proto.SetOperation;
      reader.readMessage(value,proto.SetOperation.deserializeBinaryFromReader);
      msg.setExclusion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UsersetRewrite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UsersetRewrite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UsersetRewrite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UsersetRewrite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SetOperation.serializeBinaryToWriter
    );
  }
  f = message.getIntersection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SetOperation.serializeBinaryToWriter
    );
  }
  f = message.getExclusion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SetOperation.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetOperation union = 1;
 * @return {?proto.SetOperation}
 */
proto.UsersetRewrite.prototype.getUnion = function() {
  return /** @type{?proto.SetOperation} */ (
    jspb.Message.getWrapperField(this, proto.SetOperation, 1));
};


/**
 * @param {?proto.SetOperation|undefined} value
 * @return {!proto.UsersetRewrite} returns this
*/
proto.UsersetRewrite.prototype.setUnion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.UsersetRewrite.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UsersetRewrite} returns this
 */
proto.UsersetRewrite.prototype.clearUnion = function() {
  return this.setUnion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UsersetRewrite.prototype.hasUnion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SetOperation intersection = 2;
 * @return {?proto.SetOperation}
 */
proto.UsersetRewrite.prototype.getIntersection = function() {
  return /** @type{?proto.SetOperation} */ (
    jspb.Message.getWrapperField(this, proto.SetOperation, 2));
};


/**
 * @param {?proto.SetOperation|undefined} value
 * @return {!proto.UsersetRewrite} returns this
*/
proto.UsersetRewrite.prototype.setIntersection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.UsersetRewrite.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UsersetRewrite} returns this
 */
proto.UsersetRewrite.prototype.clearIntersection = function() {
  return this.setIntersection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UsersetRewrite.prototype.hasIntersection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SetOperation exclusion = 3;
 * @return {?proto.SetOperation}
 */
proto.UsersetRewrite.prototype.getExclusion = function() {
  return /** @type{?proto.SetOperation} */ (
    jspb.Message.getWrapperField(this, proto.SetOperation, 3));
};


/**
 * @param {?proto.SetOperation|undefined} value
 * @return {!proto.UsersetRewrite} returns this
*/
proto.UsersetRewrite.prototype.setExclusion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.UsersetRewrite.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UsersetRewrite} returns this
 */
proto.UsersetRewrite.prototype.clearExclusion = function() {
  return this.setExclusion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UsersetRewrite.prototype.hasExclusion = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SetOperation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.SetOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    childList: jspb.Message.toObjectList(msg.getChildList(),
    proto.SetOperation.Child.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetOperation}
 */
proto.SetOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetOperation;
  return proto.SetOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetOperation}
 */
proto.SetOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SetOperation.Child;
      reader.readMessage(value,proto.SetOperation.Child.deserializeBinaryFromReader);
      msg.addChild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChildList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SetOperation.Child.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SetOperation.Child.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.SetOperation.Child.ChildTypeCase = {
  CHILD_TYPE_NOT_SET: 0,
  _THIS: 1,
  COMPUTED_USERSET: 2,
  TUPLE_TO_USERSET: 3,
  USERSET_REWRITE: 4
};

/**
 * @return {proto.SetOperation.Child.ChildTypeCase}
 */
proto.SetOperation.Child.prototype.getChildTypeCase = function() {
  return /** @type {proto.SetOperation.Child.ChildTypeCase} */(jspb.Message.computeOneofCase(this, proto.SetOperation.Child.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetOperation.Child.prototype.toObject = function(opt_includeInstance) {
  return proto.SetOperation.Child.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetOperation.Child} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperation.Child.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_this: (f = msg.getThis()) && proto.SetOperation.Child.This.toObject(includeInstance, f),
    computedUserset: (f = msg.getComputedUserset()) && proto.ComputedUserset.toObject(includeInstance, f),
    tupleToUserset: (f = msg.getTupleToUserset()) && proto.TupleToUserset.toObject(includeInstance, f),
    usersetRewrite: (f = msg.getUsersetRewrite()) && proto.UsersetRewrite.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetOperation.Child}
 */
proto.SetOperation.Child.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetOperation.Child;
  return proto.SetOperation.Child.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetOperation.Child} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetOperation.Child}
 */
proto.SetOperation.Child.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SetOperation.Child.This;
      reader.readMessage(value,proto.SetOperation.Child.This.deserializeBinaryFromReader);
      msg.setThis(value);
      break;
    case 2:
      var value = new proto.ComputedUserset;
      reader.readMessage(value,proto.ComputedUserset.deserializeBinaryFromReader);
      msg.setComputedUserset(value);
      break;
    case 3:
      var value = new proto.TupleToUserset;
      reader.readMessage(value,proto.TupleToUserset.deserializeBinaryFromReader);
      msg.setTupleToUserset(value);
      break;
    case 4:
      var value = new proto.UsersetRewrite;
      reader.readMessage(value,proto.UsersetRewrite.deserializeBinaryFromReader);
      msg.setUsersetRewrite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetOperation.Child.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetOperation.Child.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetOperation.Child} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperation.Child.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThis();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SetOperation.Child.This.serializeBinaryToWriter
    );
  }
  f = message.getComputedUserset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ComputedUserset.serializeBinaryToWriter
    );
  }
  f = message.getTupleToUserset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TupleToUserset.serializeBinaryToWriter
    );
  }
  f = message.getUsersetRewrite();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.UsersetRewrite.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetOperation.Child.This.prototype.toObject = function(opt_includeInstance) {
  return proto.SetOperation.Child.This.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetOperation.Child.This} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperation.Child.This.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetOperation.Child.This}
 */
proto.SetOperation.Child.This.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetOperation.Child.This;
  return proto.SetOperation.Child.This.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetOperation.Child.This} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetOperation.Child.This}
 */
proto.SetOperation.Child.This.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetOperation.Child.This.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetOperation.Child.This.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetOperation.Child.This} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperation.Child.This.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional This _this = 1;
 * @return {?proto.SetOperation.Child.This}
 */
proto.SetOperation.Child.prototype.getThis = function() {
  return /** @type{?proto.SetOperation.Child.This} */ (
    jspb.Message.getWrapperField(this, proto.SetOperation.Child.This, 1));
};


/**
 * @param {?proto.SetOperation.Child.This|undefined} value
 * @return {!proto.SetOperation.Child} returns this
*/
proto.SetOperation.Child.prototype.setThis = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.SetOperation.Child.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetOperation.Child} returns this
 */
proto.SetOperation.Child.prototype.clearThis = function() {
  return this.setThis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetOperation.Child.prototype.hasThis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ComputedUserset computed_userset = 2;
 * @return {?proto.ComputedUserset}
 */
proto.SetOperation.Child.prototype.getComputedUserset = function() {
  return /** @type{?proto.ComputedUserset} */ (
    jspb.Message.getWrapperField(this, proto.ComputedUserset, 2));
};


/**
 * @param {?proto.ComputedUserset|undefined} value
 * @return {!proto.SetOperation.Child} returns this
*/
proto.SetOperation.Child.prototype.setComputedUserset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.SetOperation.Child.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetOperation.Child} returns this
 */
proto.SetOperation.Child.prototype.clearComputedUserset = function() {
  return this.setComputedUserset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetOperation.Child.prototype.hasComputedUserset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TupleToUserset tuple_to_userset = 3;
 * @return {?proto.TupleToUserset}
 */
proto.SetOperation.Child.prototype.getTupleToUserset = function() {
  return /** @type{?proto.TupleToUserset} */ (
    jspb.Message.getWrapperField(this, proto.TupleToUserset, 3));
};


/**
 * @param {?proto.TupleToUserset|undefined} value
 * @return {!proto.SetOperation.Child} returns this
*/
proto.SetOperation.Child.prototype.setTupleToUserset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.SetOperation.Child.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetOperation.Child} returns this
 */
proto.SetOperation.Child.prototype.clearTupleToUserset = function() {
  return this.setTupleToUserset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetOperation.Child.prototype.hasTupleToUserset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UsersetRewrite userset_rewrite = 4;
 * @return {?proto.UsersetRewrite}
 */
proto.SetOperation.Child.prototype.getUsersetRewrite = function() {
  return /** @type{?proto.UsersetRewrite} */ (
    jspb.Message.getWrapperField(this, proto.UsersetRewrite, 4));
};


/**
 * @param {?proto.UsersetRewrite|undefined} value
 * @return {!proto.SetOperation.Child} returns this
*/
proto.SetOperation.Child.prototype.setUsersetRewrite = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.SetOperation.Child.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetOperation.Child} returns this
 */
proto.SetOperation.Child.prototype.clearUsersetRewrite = function() {
  return this.setUsersetRewrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetOperation.Child.prototype.hasUsersetRewrite = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Child child = 1;
 * @return {!Array<!proto.SetOperation.Child>}
 */
proto.SetOperation.prototype.getChildList = function() {
  return /** @type{!Array<!proto.SetOperation.Child>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SetOperation.Child, 1));
};


/**
 * @param {!Array<!proto.SetOperation.Child>} value
 * @return {!proto.SetOperation} returns this
*/
proto.SetOperation.prototype.setChildList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SetOperation.Child=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SetOperation.Child}
 */
proto.SetOperation.prototype.addChild = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SetOperation.Child, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SetOperation} returns this
 */
proto.SetOperation.prototype.clearChildList = function() {
  return this.setChildList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TupleToUserset.prototype.toObject = function(opt_includeInstance) {
  return proto.TupleToUserset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TupleToUserset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TupleToUserset.toObject = function(includeInstance, msg) {
  var f, obj = {
    tupleset: (f = msg.getTupleset()) && proto.TupleToUserset.Tupleset.toObject(includeInstance, f),
    computedUserset: (f = msg.getComputedUserset()) && proto.ComputedUserset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TupleToUserset}
 */
proto.TupleToUserset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TupleToUserset;
  return proto.TupleToUserset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TupleToUserset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TupleToUserset}
 */
proto.TupleToUserset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TupleToUserset.Tupleset;
      reader.readMessage(value,proto.TupleToUserset.Tupleset.deserializeBinaryFromReader);
      msg.setTupleset(value);
      break;
    case 2:
      var value = new proto.ComputedUserset;
      reader.readMessage(value,proto.ComputedUserset.deserializeBinaryFromReader);
      msg.setComputedUserset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TupleToUserset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TupleToUserset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TupleToUserset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TupleToUserset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTupleset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TupleToUserset.Tupleset.serializeBinaryToWriter
    );
  }
  f = message.getComputedUserset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ComputedUserset.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TupleToUserset.Tupleset.prototype.toObject = function(opt_includeInstance) {
  return proto.TupleToUserset.Tupleset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TupleToUserset.Tupleset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TupleToUserset.Tupleset.toObject = function(includeInstance, msg) {
  var f, obj = {
    relation: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TupleToUserset.Tupleset}
 */
proto.TupleToUserset.Tupleset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TupleToUserset.Tupleset;
  return proto.TupleToUserset.Tupleset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TupleToUserset.Tupleset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TupleToUserset.Tupleset}
 */
proto.TupleToUserset.Tupleset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TupleToUserset.Tupleset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TupleToUserset.Tupleset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TupleToUserset.Tupleset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TupleToUserset.Tupleset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string relation = 1;
 * @return {string}
 */
proto.TupleToUserset.Tupleset.prototype.getRelation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TupleToUserset.Tupleset} returns this
 */
proto.TupleToUserset.Tupleset.prototype.setRelation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Tupleset tupleset = 1;
 * @return {?proto.TupleToUserset.Tupleset}
 */
proto.TupleToUserset.prototype.getTupleset = function() {
  return /** @type{?proto.TupleToUserset.Tupleset} */ (
    jspb.Message.getWrapperField(this, proto.TupleToUserset.Tupleset, 1));
};


/**
 * @param {?proto.TupleToUserset.Tupleset|undefined} value
 * @return {!proto.TupleToUserset} returns this
*/
proto.TupleToUserset.prototype.setTupleset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TupleToUserset} returns this
 */
proto.TupleToUserset.prototype.clearTupleset = function() {
  return this.setTupleset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TupleToUserset.prototype.hasTupleset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ComputedUserset computed_userset = 2;
 * @return {?proto.ComputedUserset}
 */
proto.TupleToUserset.prototype.getComputedUserset = function() {
  return /** @type{?proto.ComputedUserset} */ (
    jspb.Message.getWrapperField(this, proto.ComputedUserset, 2));
};


/**
 * @param {?proto.ComputedUserset|undefined} value
 * @return {!proto.TupleToUserset} returns this
*/
proto.TupleToUserset.prototype.setComputedUserset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TupleToUserset} returns this
 */
proto.TupleToUserset.prototype.clearComputedUserset = function() {
  return this.setComputedUserset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TupleToUserset.prototype.hasComputedUserset = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ComputedUserset.prototype.toObject = function(opt_includeInstance) {
  return proto.ComputedUserset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ComputedUserset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ComputedUserset.toObject = function(includeInstance, msg) {
  var f, obj = {
    object: jspb.Message.getFieldWithDefault(msg, 1, 0),
    relation: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ComputedUserset}
 */
proto.ComputedUserset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ComputedUserset;
  return proto.ComputedUserset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ComputedUserset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ComputedUserset}
 */
proto.ComputedUserset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ComputedUserset.Object} */ (reader.readEnum());
      msg.setObject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ComputedUserset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ComputedUserset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ComputedUserset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ComputedUserset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObject();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRelation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ComputedUserset.Object = {
  TUPLE_OBJECT: 0,
  TUPLE_USERSET_OBJECT: 1
};

/**
 * optional Object object = 1;
 * @return {!proto.ComputedUserset.Object}
 */
proto.ComputedUserset.prototype.getObject = function() {
  return /** @type {!proto.ComputedUserset.Object} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ComputedUserset.Object} value
 * @return {!proto.ComputedUserset} returns this
 */
proto.ComputedUserset.prototype.setObject = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string relation = 2;
 * @return {string}
 */
proto.ComputedUserset.prototype.getRelation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ComputedUserset} returns this
 */
proto.ComputedUserset.prototype.setRelation = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto);
