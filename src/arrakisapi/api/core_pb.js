// source: arrakisapi/api/core.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.DirectUserset', null, global);
goog.exportSymbol('proto.ObjectAndRelation', null, global);
goog.exportSymbol('proto.RelationTuple', null, global);
goog.exportSymbol('proto.RelationTupleTreeNode', null, global);
goog.exportSymbol('proto.RelationTupleTreeNode.NodeTypeCase', null, global);
goog.exportSymbol('proto.RelationTupleUpdate', null, global);
goog.exportSymbol('proto.RelationTupleUpdate.Operation', null, global);
goog.exportSymbol('proto.SetOperationUserset', null, global);
goog.exportSymbol('proto.SetOperationUserset.Operation', null, global);
goog.exportSymbol('proto.User', null, global);
goog.exportSymbol('proto.User.UserOneofCase', null, global);
goog.exportSymbol('proto.Zookie', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RelationTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RelationTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RelationTuple.displayName = 'proto.RelationTuple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ObjectAndRelation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ObjectAndRelation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ObjectAndRelation.displayName = 'proto.ObjectAndRelation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.User.oneofGroups_);
};
goog.inherits(proto.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.displayName = 'proto.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Zookie = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Zookie, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Zookie.displayName = 'proto.Zookie';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RelationTupleUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RelationTupleUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RelationTupleUpdate.displayName = 'proto.RelationTupleUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RelationTupleTreeNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RelationTupleTreeNode.oneofGroups_);
};
goog.inherits(proto.RelationTupleTreeNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RelationTupleTreeNode.displayName = 'proto.RelationTupleTreeNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetOperationUserset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SetOperationUserset.repeatedFields_, null);
};
goog.inherits(proto.SetOperationUserset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetOperationUserset.displayName = 'proto.SetOperationUserset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DirectUserset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DirectUserset.repeatedFields_, null);
};
goog.inherits(proto.DirectUserset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DirectUserset.displayName = 'proto.DirectUserset';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RelationTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.RelationTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RelationTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectAndRelation: (f = msg.getObjectAndRelation()) && proto.ObjectAndRelation.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RelationTuple}
 */
proto.RelationTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RelationTuple;
  return proto.RelationTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RelationTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RelationTuple}
 */
proto.RelationTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ObjectAndRelation;
      reader.readMessage(value,proto.ObjectAndRelation.deserializeBinaryFromReader);
      msg.setObjectAndRelation(value);
      break;
    case 2:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RelationTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RelationTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RelationTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectAndRelation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ObjectAndRelation.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectAndRelation object_and_relation = 1;
 * @return {?proto.ObjectAndRelation}
 */
proto.RelationTuple.prototype.getObjectAndRelation = function() {
  return /** @type{?proto.ObjectAndRelation} */ (
    jspb.Message.getWrapperField(this, proto.ObjectAndRelation, 1));
};


/**
 * @param {?proto.ObjectAndRelation|undefined} value
 * @return {!proto.RelationTuple} returns this
*/
proto.RelationTuple.prototype.setObjectAndRelation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RelationTuple} returns this
 */
proto.RelationTuple.prototype.clearObjectAndRelation = function() {
  return this.setObjectAndRelation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RelationTuple.prototype.hasObjectAndRelation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.RelationTuple.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 2));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.RelationTuple} returns this
*/
proto.RelationTuple.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RelationTuple} returns this
 */
proto.RelationTuple.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RelationTuple.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ObjectAndRelation.prototype.toObject = function(opt_includeInstance) {
  return proto.ObjectAndRelation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ObjectAndRelation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObjectAndRelation.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    objectId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    relation: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ObjectAndRelation}
 */
proto.ObjectAndRelation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ObjectAndRelation;
  return proto.ObjectAndRelation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ObjectAndRelation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ObjectAndRelation}
 */
proto.ObjectAndRelation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ObjectAndRelation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ObjectAndRelation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ObjectAndRelation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObjectAndRelation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRelation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.ObjectAndRelation.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ObjectAndRelation} returns this
 */
proto.ObjectAndRelation.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string object_id = 2;
 * @return {string}
 */
proto.ObjectAndRelation.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ObjectAndRelation} returns this
 */
proto.ObjectAndRelation.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string relation = 3;
 * @return {string}
 */
proto.ObjectAndRelation.prototype.getRelation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ObjectAndRelation} returns this
 */
proto.ObjectAndRelation.prototype.setRelation = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.User.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.User.UserOneofCase = {
  USER_ONEOF_NOT_SET: 0,
  USERSET: 2
};

/**
 * @return {proto.User.UserOneofCase}
 */
proto.User.prototype.getUserOneofCase = function() {
  return /** @type {proto.User.UserOneofCase} */(jspb.Message.computeOneofCase(this, proto.User.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.prototype.toObject = function(opt_includeInstance) {
  return proto.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userset: (f = msg.getUserset()) && proto.ObjectAndRelation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User}
 */
proto.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User;
  return proto.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User}
 */
proto.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.ObjectAndRelation;
      reader.readMessage(value,proto.ObjectAndRelation.deserializeBinaryFromReader);
      msg.setUserset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ObjectAndRelation.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectAndRelation userset = 2;
 * @return {?proto.ObjectAndRelation}
 */
proto.User.prototype.getUserset = function() {
  return /** @type{?proto.ObjectAndRelation} */ (
    jspb.Message.getWrapperField(this, proto.ObjectAndRelation, 2));
};


/**
 * @param {?proto.ObjectAndRelation|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setUserset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.User.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearUserset = function() {
  return this.setUserset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasUserset = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Zookie.prototype.toObject = function(opt_includeInstance) {
  return proto.Zookie.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Zookie} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Zookie.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Zookie}
 */
proto.Zookie.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Zookie;
  return proto.Zookie.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Zookie} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Zookie}
 */
proto.Zookie.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Zookie.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Zookie.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Zookie} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Zookie.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.Zookie.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Zookie} returns this
 */
proto.Zookie.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RelationTupleUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.RelationTupleUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RelationTupleUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationTupleUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tuple: (f = msg.getTuple()) && proto.RelationTuple.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RelationTupleUpdate}
 */
proto.RelationTupleUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RelationTupleUpdate;
  return proto.RelationTupleUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RelationTupleUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RelationTupleUpdate}
 */
proto.RelationTupleUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.RelationTupleUpdate.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = new proto.RelationTuple;
      reader.readMessage(value,proto.RelationTuple.deserializeBinaryFromReader);
      msg.setTuple(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RelationTupleUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RelationTupleUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RelationTupleUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationTupleUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTuple();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RelationTuple.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.RelationTupleUpdate.Operation = {
  UNKNOWN: 0,
  CREATE: 1,
  TOUCH: 2,
  DELETE: 3
};

/**
 * optional Operation operation = 1;
 * @return {!proto.RelationTupleUpdate.Operation}
 */
proto.RelationTupleUpdate.prototype.getOperation = function() {
  return /** @type {!proto.RelationTupleUpdate.Operation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.RelationTupleUpdate.Operation} value
 * @return {!proto.RelationTupleUpdate} returns this
 */
proto.RelationTupleUpdate.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RelationTuple tuple = 2;
 * @return {?proto.RelationTuple}
 */
proto.RelationTupleUpdate.prototype.getTuple = function() {
  return /** @type{?proto.RelationTuple} */ (
    jspb.Message.getWrapperField(this, proto.RelationTuple, 2));
};


/**
 * @param {?proto.RelationTuple|undefined} value
 * @return {!proto.RelationTupleUpdate} returns this
*/
proto.RelationTupleUpdate.prototype.setTuple = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RelationTupleUpdate} returns this
 */
proto.RelationTupleUpdate.prototype.clearTuple = function() {
  return this.setTuple(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RelationTupleUpdate.prototype.hasTuple = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RelationTupleTreeNode.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.RelationTupleTreeNode.NodeTypeCase = {
  NODE_TYPE_NOT_SET: 0,
  INTERMEDIATE_NODE: 1,
  LEAF_NODE: 2
};

/**
 * @return {proto.RelationTupleTreeNode.NodeTypeCase}
 */
proto.RelationTupleTreeNode.prototype.getNodeTypeCase = function() {
  return /** @type {proto.RelationTupleTreeNode.NodeTypeCase} */(jspb.Message.computeOneofCase(this, proto.RelationTupleTreeNode.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RelationTupleTreeNode.prototype.toObject = function(opt_includeInstance) {
  return proto.RelationTupleTreeNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RelationTupleTreeNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationTupleTreeNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    intermediateNode: (f = msg.getIntermediateNode()) && proto.SetOperationUserset.toObject(includeInstance, f),
    leafNode: (f = msg.getLeafNode()) && proto.DirectUserset.toObject(includeInstance, f),
    expanded: (f = msg.getExpanded()) && proto.ObjectAndRelation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RelationTupleTreeNode}
 */
proto.RelationTupleTreeNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RelationTupleTreeNode;
  return proto.RelationTupleTreeNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RelationTupleTreeNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RelationTupleTreeNode}
 */
proto.RelationTupleTreeNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SetOperationUserset;
      reader.readMessage(value,proto.SetOperationUserset.deserializeBinaryFromReader);
      msg.setIntermediateNode(value);
      break;
    case 2:
      var value = new proto.DirectUserset;
      reader.readMessage(value,proto.DirectUserset.deserializeBinaryFromReader);
      msg.setLeafNode(value);
      break;
    case 3:
      var value = new proto.ObjectAndRelation;
      reader.readMessage(value,proto.ObjectAndRelation.deserializeBinaryFromReader);
      msg.setExpanded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RelationTupleTreeNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RelationTupleTreeNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RelationTupleTreeNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationTupleTreeNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntermediateNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SetOperationUserset.serializeBinaryToWriter
    );
  }
  f = message.getLeafNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DirectUserset.serializeBinaryToWriter
    );
  }
  f = message.getExpanded();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ObjectAndRelation.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetOperationUserset intermediate_node = 1;
 * @return {?proto.SetOperationUserset}
 */
proto.RelationTupleTreeNode.prototype.getIntermediateNode = function() {
  return /** @type{?proto.SetOperationUserset} */ (
    jspb.Message.getWrapperField(this, proto.SetOperationUserset, 1));
};


/**
 * @param {?proto.SetOperationUserset|undefined} value
 * @return {!proto.RelationTupleTreeNode} returns this
*/
proto.RelationTupleTreeNode.prototype.setIntermediateNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.RelationTupleTreeNode.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RelationTupleTreeNode} returns this
 */
proto.RelationTupleTreeNode.prototype.clearIntermediateNode = function() {
  return this.setIntermediateNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RelationTupleTreeNode.prototype.hasIntermediateNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DirectUserset leaf_node = 2;
 * @return {?proto.DirectUserset}
 */
proto.RelationTupleTreeNode.prototype.getLeafNode = function() {
  return /** @type{?proto.DirectUserset} */ (
    jspb.Message.getWrapperField(this, proto.DirectUserset, 2));
};


/**
 * @param {?proto.DirectUserset|undefined} value
 * @return {!proto.RelationTupleTreeNode} returns this
*/
proto.RelationTupleTreeNode.prototype.setLeafNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.RelationTupleTreeNode.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RelationTupleTreeNode} returns this
 */
proto.RelationTupleTreeNode.prototype.clearLeafNode = function() {
  return this.setLeafNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RelationTupleTreeNode.prototype.hasLeafNode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ObjectAndRelation expanded = 3;
 * @return {?proto.ObjectAndRelation}
 */
proto.RelationTupleTreeNode.prototype.getExpanded = function() {
  return /** @type{?proto.ObjectAndRelation} */ (
    jspb.Message.getWrapperField(this, proto.ObjectAndRelation, 3));
};


/**
 * @param {?proto.ObjectAndRelation|undefined} value
 * @return {!proto.RelationTupleTreeNode} returns this
*/
proto.RelationTupleTreeNode.prototype.setExpanded = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RelationTupleTreeNode} returns this
 */
proto.RelationTupleTreeNode.prototype.clearExpanded = function() {
  return this.setExpanded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RelationTupleTreeNode.prototype.hasExpanded = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SetOperationUserset.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetOperationUserset.prototype.toObject = function(opt_includeInstance) {
  return proto.SetOperationUserset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetOperationUserset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperationUserset.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    childNodesList: jspb.Message.toObjectList(msg.getChildNodesList(),
    proto.RelationTupleTreeNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetOperationUserset}
 */
proto.SetOperationUserset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetOperationUserset;
  return proto.SetOperationUserset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetOperationUserset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetOperationUserset}
 */
proto.SetOperationUserset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SetOperationUserset.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = new proto.RelationTupleTreeNode;
      reader.readMessage(value,proto.RelationTupleTreeNode.deserializeBinaryFromReader);
      msg.addChildNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetOperationUserset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetOperationUserset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetOperationUserset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetOperationUserset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChildNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.RelationTupleTreeNode.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.SetOperationUserset.Operation = {
  INVALID: 0,
  UNION: 1,
  INTERSECTION: 2,
  EXCLUSION: 3
};

/**
 * optional Operation operation = 1;
 * @return {!proto.SetOperationUserset.Operation}
 */
proto.SetOperationUserset.prototype.getOperation = function() {
  return /** @type {!proto.SetOperationUserset.Operation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SetOperationUserset.Operation} value
 * @return {!proto.SetOperationUserset} returns this
 */
proto.SetOperationUserset.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated RelationTupleTreeNode child_nodes = 2;
 * @return {!Array<!proto.RelationTupleTreeNode>}
 */
proto.SetOperationUserset.prototype.getChildNodesList = function() {
  return /** @type{!Array<!proto.RelationTupleTreeNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RelationTupleTreeNode, 2));
};


/**
 * @param {!Array<!proto.RelationTupleTreeNode>} value
 * @return {!proto.SetOperationUserset} returns this
*/
proto.SetOperationUserset.prototype.setChildNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.RelationTupleTreeNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RelationTupleTreeNode}
 */
proto.SetOperationUserset.prototype.addChildNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.RelationTupleTreeNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SetOperationUserset} returns this
 */
proto.SetOperationUserset.prototype.clearChildNodesList = function() {
  return this.setChildNodesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DirectUserset.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DirectUserset.prototype.toObject = function(opt_includeInstance) {
  return proto.DirectUserset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DirectUserset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DirectUserset.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DirectUserset}
 */
proto.DirectUserset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DirectUserset;
  return proto.DirectUserset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DirectUserset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DirectUserset}
 */
proto.DirectUserset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DirectUserset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DirectUserset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DirectUserset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DirectUserset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.User>}
 */
proto.DirectUserset.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.User, 1));
};


/**
 * @param {!Array<!proto.User>} value
 * @return {!proto.DirectUserset} returns this
*/
proto.DirectUserset.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.User}
 */
proto.DirectUserset.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DirectUserset} returns this
 */
proto.DirectUserset.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


goog.object.extend(exports, proto);
