// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies,long_type_string,client_grpc1
// @generated from protobuf file "authzed/api/v0/watch_service.proto" (package "authzed.api.v0", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RelationTupleUpdate } from "./core";
import { Zookie } from "./core";
/**
 * @generated from protobuf message authzed.api.v0.WatchRequest
 */
export interface WatchRequest {
    /**
     * A watch request specifies one or more namespaces and a zookie
     * representing the time to start watching.
     *
     * @generated from protobuf field: repeated string namespaces = 1;
     */
    namespaces: string[];
    /**
     * @generated from protobuf field: authzed.api.v0.Zookie start_revision = 2;
     */
    startRevision?: Zookie;
}
/**
 * @generated from protobuf message authzed.api.v0.WatchResponse
 */
export interface WatchResponse {
    /**
     * A watch response contains all tuple modification events in ascending
     * timestamp order, from the requested start timestamp to a timestamp
     * encoded in a heartbeat zookie included in the watch response. The client
     * can use the heartbeat zookie to resume watching where the previous watch
     * response left off.
     *
     * @generated from protobuf field: repeated authzed.api.v0.RelationTupleUpdate updates = 1;
     */
    updates: RelationTupleUpdate[];
    /**
     * @generated from protobuf field: authzed.api.v0.Zookie end_revision = 2;
     */
    endRevision?: Zookie;
}
// @generated message type with reflection information, may provide speed optimized methods
class WatchRequest$Type extends MessageType<WatchRequest> {
    constructor() {
        super("authzed.api.v0.WatchRequest", [
            { no: 1, name: "namespaces", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", items: { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$" } } } } } },
            { no: 2, name: "start_revision", kind: "message", T: () => Zookie }
        ]);
    }
    create(value?: PartialMessage<WatchRequest>): WatchRequest {
        const message = { namespaces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WatchRequest): WatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string namespaces */ 1:
                    message.namespaces.push(reader.string());
                    break;
                case /* authzed.api.v0.Zookie start_revision */ 2:
                    message.startRevision = Zookie.internalBinaryRead(reader, reader.uint32(), options, message.startRevision);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string namespaces = 1; */
        for (let i = 0; i < message.namespaces.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.namespaces[i]);
        /* authzed.api.v0.Zookie start_revision = 2; */
        if (message.startRevision)
            Zookie.internalBinaryWrite(message.startRevision, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.WatchRequest
 */
export const WatchRequest = new WatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WatchResponse$Type extends MessageType<WatchResponse> {
    constructor() {
        super("authzed.api.v0.WatchResponse", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelationTupleUpdate },
            { no: 2, name: "end_revision", kind: "message", T: () => Zookie }
        ]);
    }
    create(value?: PartialMessage<WatchResponse>): WatchResponse {
        const message = { updates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WatchResponse): WatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v0.RelationTupleUpdate updates */ 1:
                    message.updates.push(RelationTupleUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* authzed.api.v0.Zookie end_revision */ 2:
                    message.endRevision = Zookie.internalBinaryRead(reader, reader.uint32(), options, message.endRevision);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authzed.api.v0.RelationTupleUpdate updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            RelationTupleUpdate.internalBinaryWrite(message.updates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.Zookie end_revision = 2; */
        if (message.endRevision)
            Zookie.internalBinaryWrite(message.endRevision, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.WatchResponse
 */
export const WatchResponse = new WatchResponse$Type();
/**
 * @generated ServiceType for protobuf service authzed.api.v0.WatchService
 */
export const WatchService = new ServiceType("authzed.api.v0.WatchService", [
    { name: "Watch", serverStreaming: true, options: {}, I: WatchRequest, O: WatchResponse }
]);
