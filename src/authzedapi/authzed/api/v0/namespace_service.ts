// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies,long_type_string,client_grpc1
// @generated from protobuf file "authzed/api/v0/namespace_service.proto" (package "authzed.api.v0", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { NamespaceDefinition } from "./namespace";
import { Zookie } from "./core";
/**
 * @generated from protobuf message authzed.api.v0.ReadConfigRequest
 */
export interface ReadConfigRequest {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * @generated from protobuf field: authzed.api.v0.Zookie at_revision = 2;
     */
    atRevision?: Zookie;
}
/**
 * @generated from protobuf message authzed.api.v0.ReadConfigResponse
 */
export interface ReadConfigResponse {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * @generated from protobuf field: authzed.api.v0.NamespaceDefinition config = 2;
     */
    config?: NamespaceDefinition;
    /**
     * @generated from protobuf field: authzed.api.v0.Zookie revision = 4;
     */
    revision?: Zookie;
}
/**
 * @generated from protobuf message authzed.api.v0.WriteConfigRequest
 */
export interface WriteConfigRequest {
    /**
     * @generated from protobuf field: repeated authzed.api.v0.NamespaceDefinition configs = 2;
     */
    configs: NamespaceDefinition[];
}
/**
 * @generated from protobuf message authzed.api.v0.WriteConfigResponse
 */
export interface WriteConfigResponse {
    /**
     * @generated from protobuf field: authzed.api.v0.Zookie revision = 1;
     */
    revision?: Zookie;
}
/**
 * @generated from protobuf message authzed.api.v0.DeleteConfigsRequest
 */
export interface DeleteConfigsRequest {
    /**
     * @generated from protobuf field: repeated string namespaces = 1;
     */
    namespaces: string[];
}
/**
 * @generated from protobuf message authzed.api.v0.DeleteConfigsResponse
 */
export interface DeleteConfigsResponse {
    /**
     * @generated from protobuf field: authzed.api.v0.Zookie revision = 1;
     */
    revision?: Zookie;
}
// @generated message type with reflection information, may provide speed optimized methods
class ReadConfigRequest$Type extends MessageType<ReadConfigRequest> {
    constructor() {
        super("authzed.api.v0.ReadConfigRequest", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$" } } } },
            { no: 2, name: "at_revision", kind: "message", T: () => Zookie }
        ]);
    }
    create(value?: PartialMessage<ReadConfigRequest>): ReadConfigRequest {
        const message = { namespace: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadConfigRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadConfigRequest): ReadConfigRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace */ 1:
                    message.namespace = reader.string();
                    break;
                case /* authzed.api.v0.Zookie at_revision */ 2:
                    message.atRevision = Zookie.internalBinaryRead(reader, reader.uint32(), options, message.atRevision);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadConfigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace = 1; */
        if (message.namespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespace);
        /* authzed.api.v0.Zookie at_revision = 2; */
        if (message.atRevision)
            Zookie.internalBinaryWrite(message.atRevision, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ReadConfigRequest
 */
export const ReadConfigRequest = new ReadConfigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadConfigResponse$Type extends MessageType<ReadConfigResponse> {
    constructor() {
        super("authzed.api.v0.ReadConfigResponse", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "config", kind: "message", T: () => NamespaceDefinition },
            { no: 4, name: "revision", kind: "message", T: () => Zookie }
        ]);
    }
    create(value?: PartialMessage<ReadConfigResponse>): ReadConfigResponse {
        const message = { namespace: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadConfigResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadConfigResponse): ReadConfigResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace */ 1:
                    message.namespace = reader.string();
                    break;
                case /* authzed.api.v0.NamespaceDefinition config */ 2:
                    message.config = NamespaceDefinition.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* authzed.api.v0.Zookie revision */ 4:
                    message.revision = Zookie.internalBinaryRead(reader, reader.uint32(), options, message.revision);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadConfigResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace = 1; */
        if (message.namespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespace);
        /* authzed.api.v0.NamespaceDefinition config = 2; */
        if (message.config)
            NamespaceDefinition.internalBinaryWrite(message.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.Zookie revision = 4; */
        if (message.revision)
            Zookie.internalBinaryWrite(message.revision, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ReadConfigResponse
 */
export const ReadConfigResponse = new ReadConfigResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteConfigRequest$Type extends MessageType<WriteConfigRequest> {
    constructor() {
        super("authzed.api.v0.WriteConfigRequest", [
            { no: 2, name: "configs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NamespaceDefinition, options: { "validate.rules": { repeated: { minItems: "1", items: { message: { required: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<WriteConfigRequest>): WriteConfigRequest {
        const message = { configs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteConfigRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteConfigRequest): WriteConfigRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v0.NamespaceDefinition configs */ 2:
                    message.configs.push(NamespaceDefinition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WriteConfigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authzed.api.v0.NamespaceDefinition configs = 2; */
        for (let i = 0; i < message.configs.length; i++)
            NamespaceDefinition.internalBinaryWrite(message.configs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.WriteConfigRequest
 */
export const WriteConfigRequest = new WriteConfigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteConfigResponse$Type extends MessageType<WriteConfigResponse> {
    constructor() {
        super("authzed.api.v0.WriteConfigResponse", [
            { no: 1, name: "revision", kind: "message", T: () => Zookie }
        ]);
    }
    create(value?: PartialMessage<WriteConfigResponse>): WriteConfigResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteConfigResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteConfigResponse): WriteConfigResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.Zookie revision */ 1:
                    message.revision = Zookie.internalBinaryRead(reader, reader.uint32(), options, message.revision);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WriteConfigResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.Zookie revision = 1; */
        if (message.revision)
            Zookie.internalBinaryWrite(message.revision, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.WriteConfigResponse
 */
export const WriteConfigResponse = new WriteConfigResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteConfigsRequest$Type extends MessageType<DeleteConfigsRequest> {
    constructor() {
        super("authzed.api.v0.DeleteConfigsRequest", [
            { no: 1, name: "namespaces", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", items: { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$" } } } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteConfigsRequest>): DeleteConfigsRequest {
        const message = { namespaces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteConfigsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteConfigsRequest): DeleteConfigsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string namespaces */ 1:
                    message.namespaces.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteConfigsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string namespaces = 1; */
        for (let i = 0; i < message.namespaces.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.namespaces[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.DeleteConfigsRequest
 */
export const DeleteConfigsRequest = new DeleteConfigsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteConfigsResponse$Type extends MessageType<DeleteConfigsResponse> {
    constructor() {
        super("authzed.api.v0.DeleteConfigsResponse", [
            { no: 1, name: "revision", kind: "message", T: () => Zookie }
        ]);
    }
    create(value?: PartialMessage<DeleteConfigsResponse>): DeleteConfigsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteConfigsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteConfigsResponse): DeleteConfigsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.Zookie revision */ 1:
                    message.revision = Zookie.internalBinaryRead(reader, reader.uint32(), options, message.revision);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteConfigsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.Zookie revision = 1; */
        if (message.revision)
            Zookie.internalBinaryWrite(message.revision, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.DeleteConfigsResponse
 */
export const DeleteConfigsResponse = new DeleteConfigsResponse$Type();
/**
 * @generated ServiceType for protobuf service authzed.api.v0.NamespaceService
 */
export const NamespaceService = new ServiceType("authzed.api.v0.NamespaceService", [
    { name: "ReadConfig", options: {}, I: ReadConfigRequest, O: ReadConfigResponse },
    { name: "WriteConfig", options: {}, I: WriteConfigRequest, O: WriteConfigResponse },
    { name: "DeleteConfigs", options: {}, I: DeleteConfigsRequest, O: DeleteConfigsResponse }
]);
