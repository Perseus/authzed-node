// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies,long_type_string,client_grpc1
// @generated from protobuf file "authzed/api/v0/namespace.proto" (package "authzed.api.v0", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RelationReference } from "./core";
import { Any } from "../../../google/protobuf/any";
/**
 * @generated from protobuf message authzed.api.v0.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: repeated google.protobuf.Any metadata_message = 1;
     */
    metadataMessage: Any[];
}
/**
 * @generated from protobuf message authzed.api.v0.NamespaceDefinition
 */
export interface NamespaceDefinition {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated authzed.api.v0.Relation relation = 2;
     */
    relation: Relation[];
    /**
     * @generated from protobuf field: authzed.api.v0.Metadata metadata = 3;
     */
    metadata?: Metadata;
}
/**
 * @generated from protobuf message authzed.api.v0.Relation
 */
export interface Relation {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: authzed.api.v0.UsersetRewrite userset_rewrite = 2;
     */
    usersetRewrite?: UsersetRewrite;
    /**
     * @generated from protobuf field: authzed.api.v0.TypeInformation type_information = 3;
     */
    typeInformation?: TypeInformation;
    /**
     * @generated from protobuf field: authzed.api.v0.Metadata metadata = 4;
     */
    metadata?: Metadata;
}
/**
 * @generated from protobuf message authzed.api.v0.TypeInformation
 */
export interface TypeInformation {
    /**
     * @generated from protobuf field: repeated authzed.api.v0.RelationReference allowed_direct_relations = 1;
     */
    allowedDirectRelations: RelationReference[];
}
/**
 * @generated from protobuf message authzed.api.v0.UsersetRewrite
 */
export interface UsersetRewrite {
    /**
     * @generated from protobuf oneof: rewrite_operation
     */
    rewriteOperation: {
        oneofKind: "union";
        /**
         * @generated from protobuf field: authzed.api.v0.SetOperation union = 1;
         */
        union: SetOperation;
    } | {
        oneofKind: "intersection";
        /**
         * @generated from protobuf field: authzed.api.v0.SetOperation intersection = 2;
         */
        intersection: SetOperation;
    } | {
        oneofKind: "exclusion";
        /**
         * @generated from protobuf field: authzed.api.v0.SetOperation exclusion = 3;
         */
        exclusion: SetOperation;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message authzed.api.v0.SetOperation
 */
export interface SetOperation {
    /**
     * @generated from protobuf field: repeated authzed.api.v0.SetOperation.Child child = 1;
     */
    child: SetOperation_Child[];
}
/**
 * @generated from protobuf message authzed.api.v0.SetOperation.Child
 */
export interface SetOperation_Child {
    /**
     * @generated from protobuf oneof: child_type
     */
    childType: {
        oneofKind: "This";
        /**
         * @generated from protobuf field: authzed.api.v0.SetOperation.Child.This _this = 1;
         */
        This: SetOperation_Child_This;
    } | {
        oneofKind: "computedUserset";
        /**
         * @generated from protobuf field: authzed.api.v0.ComputedUserset computed_userset = 2;
         */
        computedUserset: ComputedUserset;
    } | {
        oneofKind: "tupleToUserset";
        /**
         * @generated from protobuf field: authzed.api.v0.TupleToUserset tuple_to_userset = 3;
         */
        tupleToUserset: TupleToUserset;
    } | {
        oneofKind: "usersetRewrite";
        /**
         * @generated from protobuf field: authzed.api.v0.UsersetRewrite userset_rewrite = 4;
         */
        usersetRewrite: UsersetRewrite;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message authzed.api.v0.SetOperation.Child.This
 */
export interface SetOperation_Child_This {
}
/**
 * @generated from protobuf message authzed.api.v0.TupleToUserset
 */
export interface TupleToUserset {
    /**
     * @generated from protobuf field: authzed.api.v0.TupleToUserset.Tupleset tupleset = 1;
     */
    tupleset?: TupleToUserset_Tupleset;
    /**
     * @generated from protobuf field: authzed.api.v0.ComputedUserset computed_userset = 2;
     */
    computedUserset?: ComputedUserset;
}
/**
 * @generated from protobuf message authzed.api.v0.TupleToUserset.Tupleset
 */
export interface TupleToUserset_Tupleset {
    /**
     * @generated from protobuf field: string relation = 1;
     */
    relation: string;
}
/**
 * @generated from protobuf message authzed.api.v0.ComputedUserset
 */
export interface ComputedUserset {
    /**
     * @generated from protobuf field: authzed.api.v0.ComputedUserset.Object object = 1;
     */
    object: ComputedUserset_Object;
    /**
     * @generated from protobuf field: string relation = 2;
     */
    relation: string;
}
/**
 * @generated from protobuf enum authzed.api.v0.ComputedUserset.Object
 */
export enum ComputedUserset_Object {
    /**
     * @generated from protobuf enum value: TUPLE_OBJECT = 0;
     */
    TUPLE_OBJECT = 0,
    /**
     * @generated from protobuf enum value: TUPLE_USERSET_OBJECT = 1;
     */
    TUPLE_USERSET_OBJECT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("authzed.api.v0.Metadata", [
            { no: 1, name: "metadata_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any, options: { "validate.rules": { repeated: { minItems: "1", items: { message: { required: true }, any: { required: true, in: ["type.googleapis.com/impl.v1.DocComment", "type.googleapis.com/impl.v1.RelationMetadata"] } } } } } }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = { metadataMessage: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Any metadata_message */ 1:
                    message.metadataMessage.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Any metadata_message = 1; */
        for (let i = 0; i < message.metadataMessage.length; i++)
            Any.internalBinaryWrite(message.metadataMessage[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.Metadata
 */
export const Metadata = new Metadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NamespaceDefinition$Type extends MessageType<NamespaceDefinition> {
    constructor() {
        super("authzed.api.v0.NamespaceDefinition", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$" } } } },
            { no: 2, name: "relation", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relation },
            { no: 3, name: "metadata", kind: "message", T: () => Metadata }
        ]);
    }
    create(value?: PartialMessage<NamespaceDefinition>): NamespaceDefinition {
        const message = { name: "", relation: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NamespaceDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NamespaceDefinition): NamespaceDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated authzed.api.v0.Relation relation */ 2:
                    message.relation.push(Relation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* authzed.api.v0.Metadata metadata */ 3:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NamespaceDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated authzed.api.v0.Relation relation = 2; */
        for (let i = 0; i < message.relation.length; i++)
            Relation.internalBinaryWrite(message.relation[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.Metadata metadata = 3; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.NamespaceDefinition
 */
export const NamespaceDefinition = new NamespaceDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Relation$Type extends MessageType<Relation> {
    constructor() {
        super("authzed.api.v0.Relation", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "64", pattern: "^[a-z][a-z0-9_]{2,62}[a-z0-9]$" } } } },
            { no: 2, name: "userset_rewrite", kind: "message", T: () => UsersetRewrite },
            { no: 3, name: "type_information", kind: "message", T: () => TypeInformation },
            { no: 4, name: "metadata", kind: "message", T: () => Metadata }
        ]);
    }
    create(value?: PartialMessage<Relation>): Relation {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Relation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Relation): Relation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* authzed.api.v0.UsersetRewrite userset_rewrite */ 2:
                    message.usersetRewrite = UsersetRewrite.internalBinaryRead(reader, reader.uint32(), options, message.usersetRewrite);
                    break;
                case /* authzed.api.v0.TypeInformation type_information */ 3:
                    message.typeInformation = TypeInformation.internalBinaryRead(reader, reader.uint32(), options, message.typeInformation);
                    break;
                case /* authzed.api.v0.Metadata metadata */ 4:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Relation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* authzed.api.v0.UsersetRewrite userset_rewrite = 2; */
        if (message.usersetRewrite)
            UsersetRewrite.internalBinaryWrite(message.usersetRewrite, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.TypeInformation type_information = 3; */
        if (message.typeInformation)
            TypeInformation.internalBinaryWrite(message.typeInformation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.Metadata metadata = 4; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.Relation
 */
export const Relation = new Relation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TypeInformation$Type extends MessageType<TypeInformation> {
    constructor() {
        super("authzed.api.v0.TypeInformation", [
            { no: 1, name: "allowed_direct_relations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelationReference }
        ]);
    }
    create(value?: PartialMessage<TypeInformation>): TypeInformation {
        const message = { allowedDirectRelations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TypeInformation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TypeInformation): TypeInformation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v0.RelationReference allowed_direct_relations */ 1:
                    message.allowedDirectRelations.push(RelationReference.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TypeInformation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authzed.api.v0.RelationReference allowed_direct_relations = 1; */
        for (let i = 0; i < message.allowedDirectRelations.length; i++)
            RelationReference.internalBinaryWrite(message.allowedDirectRelations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.TypeInformation
 */
export const TypeInformation = new TypeInformation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsersetRewrite$Type extends MessageType<UsersetRewrite> {
    constructor() {
        super("authzed.api.v0.UsersetRewrite", [
            { no: 1, name: "union", kind: "message", oneof: "rewriteOperation", T: () => SetOperation, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "intersection", kind: "message", oneof: "rewriteOperation", T: () => SetOperation, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "exclusion", kind: "message", oneof: "rewriteOperation", T: () => SetOperation, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<UsersetRewrite>): UsersetRewrite {
        const message = { rewriteOperation: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UsersetRewrite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsersetRewrite): UsersetRewrite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.SetOperation union */ 1:
                    message.rewriteOperation = {
                        oneofKind: "union",
                        union: SetOperation.internalBinaryRead(reader, reader.uint32(), options, (message.rewriteOperation as any).union)
                    };
                    break;
                case /* authzed.api.v0.SetOperation intersection */ 2:
                    message.rewriteOperation = {
                        oneofKind: "intersection",
                        intersection: SetOperation.internalBinaryRead(reader, reader.uint32(), options, (message.rewriteOperation as any).intersection)
                    };
                    break;
                case /* authzed.api.v0.SetOperation exclusion */ 3:
                    message.rewriteOperation = {
                        oneofKind: "exclusion",
                        exclusion: SetOperation.internalBinaryRead(reader, reader.uint32(), options, (message.rewriteOperation as any).exclusion)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsersetRewrite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.SetOperation union = 1; */
        if (message.rewriteOperation.oneofKind === "union")
            SetOperation.internalBinaryWrite(message.rewriteOperation.union, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.SetOperation intersection = 2; */
        if (message.rewriteOperation.oneofKind === "intersection")
            SetOperation.internalBinaryWrite(message.rewriteOperation.intersection, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.SetOperation exclusion = 3; */
        if (message.rewriteOperation.oneofKind === "exclusion")
            SetOperation.internalBinaryWrite(message.rewriteOperation.exclusion, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.UsersetRewrite
 */
export const UsersetRewrite = new UsersetRewrite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetOperation$Type extends MessageType<SetOperation> {
    constructor() {
        super("authzed.api.v0.SetOperation", [
            { no: 1, name: "child", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SetOperation_Child, options: { "validate.rules": { repeated: { minItems: "1", items: { message: { required: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<SetOperation>): SetOperation {
        const message = { child: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetOperation): SetOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v0.SetOperation.Child child */ 1:
                    message.child.push(SetOperation_Child.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authzed.api.v0.SetOperation.Child child = 1; */
        for (let i = 0; i < message.child.length; i++)
            SetOperation_Child.internalBinaryWrite(message.child[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.SetOperation
 */
export const SetOperation = new SetOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetOperation_Child$Type extends MessageType<SetOperation_Child> {
    constructor() {
        super("authzed.api.v0.SetOperation.Child", [
            { no: 1, name: "_this", kind: "message", oneof: "childType", T: () => SetOperation_Child_This },
            { no: 2, name: "computed_userset", kind: "message", oneof: "childType", T: () => ComputedUserset, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "tuple_to_userset", kind: "message", oneof: "childType", T: () => TupleToUserset, options: { "validate.rules": { message: { required: true } } } },
            { no: 4, name: "userset_rewrite", kind: "message", oneof: "childType", T: () => UsersetRewrite, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<SetOperation_Child>): SetOperation_Child {
        const message = { childType: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetOperation_Child>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetOperation_Child): SetOperation_Child {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.SetOperation.Child.This _this */ 1:
                    message.childType = {
                        oneofKind: "This",
                        This: SetOperation_Child_This.internalBinaryRead(reader, reader.uint32(), options, (message.childType as any).This)
                    };
                    break;
                case /* authzed.api.v0.ComputedUserset computed_userset */ 2:
                    message.childType = {
                        oneofKind: "computedUserset",
                        computedUserset: ComputedUserset.internalBinaryRead(reader, reader.uint32(), options, (message.childType as any).computedUserset)
                    };
                    break;
                case /* authzed.api.v0.TupleToUserset tuple_to_userset */ 3:
                    message.childType = {
                        oneofKind: "tupleToUserset",
                        tupleToUserset: TupleToUserset.internalBinaryRead(reader, reader.uint32(), options, (message.childType as any).tupleToUserset)
                    };
                    break;
                case /* authzed.api.v0.UsersetRewrite userset_rewrite */ 4:
                    message.childType = {
                        oneofKind: "usersetRewrite",
                        usersetRewrite: UsersetRewrite.internalBinaryRead(reader, reader.uint32(), options, (message.childType as any).usersetRewrite)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetOperation_Child, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.SetOperation.Child.This _this = 1; */
        if (message.childType.oneofKind === "This")
            SetOperation_Child_This.internalBinaryWrite(message.childType.This, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.ComputedUserset computed_userset = 2; */
        if (message.childType.oneofKind === "computedUserset")
            ComputedUserset.internalBinaryWrite(message.childType.computedUserset, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.TupleToUserset tuple_to_userset = 3; */
        if (message.childType.oneofKind === "tupleToUserset")
            TupleToUserset.internalBinaryWrite(message.childType.tupleToUserset, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.UsersetRewrite userset_rewrite = 4; */
        if (message.childType.oneofKind === "usersetRewrite")
            UsersetRewrite.internalBinaryWrite(message.childType.usersetRewrite, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.SetOperation.Child
 */
export const SetOperation_Child = new SetOperation_Child$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetOperation_Child_This$Type extends MessageType<SetOperation_Child_This> {
    constructor() {
        super("authzed.api.v0.SetOperation.Child.This", []);
    }
    create(value?: PartialMessage<SetOperation_Child_This>): SetOperation_Child_This {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetOperation_Child_This>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetOperation_Child_This): SetOperation_Child_This {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetOperation_Child_This, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.SetOperation.Child.This
 */
export const SetOperation_Child_This = new SetOperation_Child_This$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TupleToUserset$Type extends MessageType<TupleToUserset> {
    constructor() {
        super("authzed.api.v0.TupleToUserset", [
            { no: 1, name: "tupleset", kind: "message", T: () => TupleToUserset_Tupleset, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "computed_userset", kind: "message", T: () => ComputedUserset, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<TupleToUserset>): TupleToUserset {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TupleToUserset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TupleToUserset): TupleToUserset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.TupleToUserset.Tupleset tupleset */ 1:
                    message.tupleset = TupleToUserset_Tupleset.internalBinaryRead(reader, reader.uint32(), options, message.tupleset);
                    break;
                case /* authzed.api.v0.ComputedUserset computed_userset */ 2:
                    message.computedUserset = ComputedUserset.internalBinaryRead(reader, reader.uint32(), options, message.computedUserset);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TupleToUserset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.TupleToUserset.Tupleset tupleset = 1; */
        if (message.tupleset)
            TupleToUserset_Tupleset.internalBinaryWrite(message.tupleset, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v0.ComputedUserset computed_userset = 2; */
        if (message.computedUserset)
            ComputedUserset.internalBinaryWrite(message.computedUserset, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.TupleToUserset
 */
export const TupleToUserset = new TupleToUserset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TupleToUserset_Tupleset$Type extends MessageType<TupleToUserset_Tupleset> {
    constructor() {
        super("authzed.api.v0.TupleToUserset.Tupleset", [
            { no: 1, name: "relation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "64", pattern: "^[a-z][a-z0-9_]{2,62}[a-z0-9]$" } } } }
        ]);
    }
    create(value?: PartialMessage<TupleToUserset_Tupleset>): TupleToUserset_Tupleset {
        const message = { relation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TupleToUserset_Tupleset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TupleToUserset_Tupleset): TupleToUserset_Tupleset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string relation */ 1:
                    message.relation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TupleToUserset_Tupleset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string relation = 1; */
        if (message.relation !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.relation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.TupleToUserset.Tupleset
 */
export const TupleToUserset_Tupleset = new TupleToUserset_Tupleset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComputedUserset$Type extends MessageType<ComputedUserset> {
    constructor() {
        super("authzed.api.v0.ComputedUserset", [
            { no: 1, name: "object", kind: "enum", T: () => ["authzed.api.v0.ComputedUserset.Object", ComputedUserset_Object], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "relation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "64", pattern: "^[a-z][a-z0-9_]{2,62}[a-z0-9]$" } } } }
        ]);
    }
    create(value?: PartialMessage<ComputedUserset>): ComputedUserset {
        const message = { object: 0, relation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ComputedUserset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputedUserset): ComputedUserset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.ComputedUserset.Object object */ 1:
                    message.object = reader.int32();
                    break;
                case /* string relation */ 2:
                    message.relation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComputedUserset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.ComputedUserset.Object object = 1; */
        if (message.object !== 0)
            writer.tag(1, WireType.Varint).int32(message.object);
        /* string relation = 2; */
        if (message.relation !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.relation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ComputedUserset
 */
export const ComputedUserset = new ComputedUserset$Type();
